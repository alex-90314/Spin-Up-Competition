{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMtr = motor(PORT20, ratio18_1, true);\n\nmotor rightMtr = motor(PORT11, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\nmotor aimMtr = motor(PORT10, ratio18_1, false);\n\nmotor shootMtrMotorA = motor(PORT15, ratio18_1, true);\nmotor shootMtrMotorB = motor(PORT19, ratio18_1, false);\nmotor_group shootMtr = motor_group(shootMtrMotorA, shootMtrMotorB);\n\nmotor strMtr = motor(PORT17, ratio18_1, false);\n\n/*vex-vision-config:begin*/\nvision::signature camera__SIG_1 = vision::signature (1, 1839, 2181, 2010,-6053, -5893, -5974,11, 0);\nvision camera = vision (PORT13, 50, camera__SIG_1);\n/*vex-vision-config:end*/\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:\n//    Author:\n//    Created:\n//    Configuration:\n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n#include \"string\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n\nvoid resetMotors() {\n  aimMtr.stop();\n  leftMtr.stop();\n  rightMtr.stop();\n  shootMtr.stop();\n\n}\n\nstd::string curDir = \"\";\nbool inAuto = false;\nbool aimSpinning = false;\nbool pickingUp = false;\n\nvoid strL() {\n  if (curDir != \"l\") {\n    strMtr.spin(forward);\n    curDir = \"l\";\n  } else {\n    curDir = \"\";\n    strMtr.stop();\n  }\n}\nvoid strR(){\n  if (curDir != \"r\") {\n    strMtr.spin(reverse);\n    curDir = \"r\";\n  } else {\n    curDir = \"\";\n    strMtr.stop();\n  }\n}\n\n\nvoid aimUp(){\n  aimMtr.setVelocity(50,percent);\n  aimMtr.setStopping(hold);\n  if (!aimSpinning) {\n    aimMtr.spin(forward);\n    aimSpinning = true;\n  } else {\n    aimMtr.stop();\n    aimSpinning = false;\n  }\n}\n\nvoid aimDown(){\n  aimMtr.setVelocity(50,percent);\n  aimMtr.setStopping(hold);\n  if (!aimSpinning) {\n    aimMtr.spin(reverse);\n    aimSpinning = true;\n  } else {\n    aimMtr.stop();\n    aimSpinning = false;\n  }\n}\n\n\n\n\nvoid pickUpToggle(){\n  if (!pickingUp) {\n    shootMtr.setMaxTorque(100,percent);\n    shootMtr.setVelocity(40,percent);\n    shootMtr.spin(forward);\n    pickingUp = true;\n  } else {\n    shootMtr.stop();\n    pickingUp = false;\n  }\n}\n\nvoid shoot(){\n  if (!shootMtr.isSpinning()) {\n    shootMtr.setVelocity(100,percent);\n    shootMtr.spin(reverse);\n    wait(0.6,seconds);\n    shootMtr.stop();\n  }\n}\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  aimMtr.setStopping(hold);\n  aimMtr.spinToPosition(360,degrees);\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  inAuto = true;\n  resetMotors();\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n  aimMtr.setStopping(hold);\n  aimMtr.setPosition(0,degrees);\n  aimMtr.setVelocity(30,percent);\n  aimMtr.setMaxTorque(100,percent);\n  while (inAuto){\n    camera.takeSnapshot(camera__SIG_1);\n    if (camera.largestObject.exists){\n      Brain.Screen.clearScreen();\n      Brain.Screen.setCursor(1,1);\n      Brain.Screen.print(\"Object Seen   centerX: %d, centerY: %d      \",camera.largestObject.centerX, camera.largestObject.centerY);\n      Brain.Screen.setCursor(3,1);\n      Brain.Screen.print(\"Area: %d\",(camera.largestObject.width * camera.largestObject.height));\n      Brain.Screen.print(aimMtr.position(degrees));\n      wait(0.1,seconds);\n      while (((camera.largestObject.centerY < 95 || camera.largestObject.centerY > 105) || (camera.largestObject.centerX < 140 || camera.largestObject.centerX > 160)) && camera.largestObject.exists && inAuto && camera.largestObject.width * camera.largestObject.height < 13000) {\n        camera.takeSnapshot(camera__SIG_1);\n        Brain.Screen.setCursor(2,1);\n        Brain.Screen.clearScreen();\n        Brain.Screen.print(\"centerX: %d, centerY: %d\",camera.largestObject.centerX, camera.largestObject.centerY);\n        Brain.Screen.setCursor(3,1);\n        Brain.Screen.clearLine(3);\n        if (camera.largestObject.centerY < 95 || camera.largestObject.centerY > 105){\n          if (camera.largestObject.centerY < 95) {\n            aimMtr.spin(forward);\n            Brain.Screen.print(\"Below 190\");\n          } else if (camera.largestObject.centerY > 105) {\n            aimMtr.spin(reverse);\n            Brain.Screen.print(\"Above 210\");\n          } else { \n            aimMtr.stop();\n          }\n          wait(0.05,seconds);\n        }\n        if (camera.largestObject.centerX < 140 || camera.largestObject.centerX > 160) {\n          if (camera.largestObject.centerX < 140) {\n            rightMtr.setVelocity(50,percent);\n            rightMtr.spin(forward);\n            leftMtr.setVelocity(50,percent);\n            leftMtr.spin(forward);\n            Brain.Screen.print(\"Below 140\");\n          } else if (camera.largestObject.centerX > 160) {\n            rightMtr.setVelocity(50,percent);\n            rightMtr.spin(forward);\n            leftMtr.setVelocity(50, percent);\n            leftMtr.spin(forward);\n            Brain.Screen.print(\"Above 160\");\n          } else { \n            leftMtr.stop();\n            rightMtr.stop();\n          }\n          wait(0.05,seconds);\n        }\n      }\n      aimMtr.stop();\n      leftMtr.stop();\n      rightMtr.stop();\n    } else {\n      aimMtr.spinToPosition(500,degrees);\n      leftMtr.setVelocity(10,percent);\n      leftMtr.spin(forward);\n      rightMtr.spin(reverse);\n      camera.takeSnapshot(camera__SIG_1);\n      while (camera.largestObject.exists != true){\n        camera.takeSnapshot(camera__SIG_1);\n        wait(0.1,seconds);\n      }\n      aimMtr.stop();\n      leftMtr.stop();\n      rightMtr.stop();\n    }\n    Brain.Screen.clearScreen();\n  }\n}\n\nvoid userControl(void) {\n  inAuto = false;\n  resetMotors();\n  Brain.Screen.clearScreen();\n  leftMtr.spin(forward);\n  rightMtr.spin(forward);\n  // place driver control in this while loop\n  Controller1.ButtonL2.released(strL);\n  Controller1.ButtonR2.released(strR);\n  Controller1.ButtonUp.pressed(aimUp);\n  Controller1.ButtonUp.released(aimUp); \n  Controller1.ButtonDown.pressed(aimDown);\n  Controller1.ButtonDown.released(aimDown);\n  Controller1.ButtonB.released(pickUpToggle);\n  Controller1.ButtonA.released(shoot);\n  while (true) {\n    leftMtr.setVelocity(Controller1.Axis2.position()*1.5, rpm);\n    rightMtr.setVelocity(Controller1.Axis3.position()*1.5, rpm);\n    wait(20, msec);\n  }\n}\n\nvoid endLIFE() {\n  vexSystemExitRequest();\n}\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  Controller1.ButtonX.released(endLIFE);\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[20],"name":"leftMtr","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"rightMtr","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[10],"name":"aimMtr","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[15,19],"name":"shootMtr","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[17],"name":"strMtr","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[13],"name":"camera","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":1839,\"uMax\":2181,\"uMean\":2010,\"vMin\":-6053,\"vMax\":-5893,\"vMean\":-5974,\"rgb\":15058020,\"type\":0,\"name\":\"SIG_1\"},\"range\":11},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}